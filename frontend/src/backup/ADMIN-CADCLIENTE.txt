 const handleSubmit = async (usuario) => {

        const errors = [];

        const cpfError = await validarCPF(usuario.usu_cpf);
        if (cpfError) {
            errors.push(cpfError);
        }

        const emailError = await validaEmail(usuario);
        if (emailError) {
            errors.push(emailError);
        }

        const senhaError = validarSenha(usuario.usu_senha);
        if (senhaError.length > 0) {
            errors.push(senhaError.join(' '));
        } else {
            setSenhaErro('');
        }
        if (errors.length > 0) {
            Swal.fire({
                title: 'Dados Incorretos',
                html: errors.join('<br/>'),
                icon: 'error',
                confirmButtonText: 'OK',
                iconColor: '#d33',
                confirmButtonColor: '#d33',
            });
            return;
        }

        try {
            let response;

            if (usuario.usu_id) {
                response = await api.patch(`/usuarios/${usuario.usu_id}`, usuario);
            } else {
                response = await api.post('/usuarios', usuario);
            }

            Swal.fire({
                title: 'Sucesso!',
                text: response.data.mensagem,
                icon: 'success',
                iconColor: "rgb(40, 167, 69)",
                confirmButtonColor: "rgb(40, 167, 69)",
            });

            ListarUsuarios();
            setShowForm(false);
        } catch (error) {
            const backendErrors = [];

            if (error.response && error.response.data) {
                if (error.response.data.erros && Array.isArray(error.response.data.erros)) {
                    backendErrors.push(...error.response.data.erros);
                } else if (error.response.data.mensagem) {
                    backendErrors.push(error.response.data.mensagem);
                }
            }

            if (backendErrors.length > 0) {
                Swal.fire({
                    title: 'Erro!',
                    html: backendErrors.join('<br/>'),
                    icon: 'error',
                    iconColor: '#d33',
                    confirmButtonColor: '#d33',
                });
            } else {
                Swal.fire({
                    title: 'Erro!',
                    text: 'Erro ao salvar usuário.',
                    icon: 'error',
                    iconColor: '#d33',
                    confirmButtonColor: '#d33',
                });
            }
        }
    };

    const validarSenha = (senha) => {
        const minLength = 8;
        const hasUpperCase = /[A-Z]/.test(senha);
        const hasLowerCase = /[a-z]/.test(senha);
        const hasNumber = /\d/.test(senha);
        const hasSpecialChar = /[!@#$%^&*]/.test(senha);
        const hasSpaces = /\s/.test(senha);

        let errorMessage = [];

        if (senha.length < minLength) {
            errorMessage.push(`Pelo menos ${minLength} caracteres.`);
        }
        if (!hasUpperCase) {
            errorMessage.push('Uma letra maiúscula.');
        }
        if (!hasLowerCase) {
            errorMessage.push('Uma letra minúscula.');
        }
        if (!hasNumber) {
            errorMessage.push('Um número.');
        }
        if (!hasSpecialChar) {
            errorMessage.push('Um caractere especial (ex: !@#$%^&*).');
        }
        if (hasSpaces) {
            errorMessage.push('Sem espaços em branco.');
        }

        return errorMessage.length > 0 ? errorMessage : [];
    };

    const handleFocus = () => {
        setFocused(true);
    };

    const handleBlur = () => {
        setFocused(false);
        validarSenha(senha);
    };

    const validarCPF = async (cpf) => {
        const cpfRegex = /^\d{3}\.\d{3}\.\d{3}\-\d{2}$/;

        if (!cpfRegex.test(cpf)) {
            return 'CPF inválido.';
        }

        const numbersOnly = cpf.replace(/[^\d]/g, '');

        if (numbersOnly.length !== 11 || /^(\d)\1+$/.test(numbersOnly)) {
            return 'CPF inválido.';
        }

        let soma = 0;
        let resto;

        for (let i = 1; i <= 9; i++) {
            soma += parseInt(numbersOnly.substring(i - 1, i)) * (11 - i);
        }
        resto = (soma * 10) % 11;
        if (resto === 10 || resto === 11) resto = 0;
        if (resto !== parseInt(numbersOnly.substring(9, 10))) {
            return 'CPF inválido.';
        }

        soma = 0;
        for (let i = 1; i <= 10; i++) {
            soma += parseInt(numbersOnly.substring(i - 1, i)) * (12 - i);
        }
        resto = (soma * 10) % 11;
        if (resto === 10 || resto === 11) resto = 0;
        if (resto !== parseInt(numbersOnly.substring(10, 11))) {
            return 'CPF inválido.';
        }
        try {
            const response = await api.post('/usuarios/verificarCpf', { usu_cpf: cpf });
            if (response.data.sucesso && response.data.dados) {
                return 'CPF já está cadastrado.';
            }
        } catch (error) {
            console.error('Erro na verificação do CPF:', error);
            return 'Erro na verificação do CPF. Por favor, tente novamente.';
        }
        return null;
    };

    function checkEmail(email) {
        return /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(
            email
        );
    };

    const validaEmail = async (usuario) => {
        const email = usuario.usu_email.trim();
        const id = usuario.usu_id;

        if (!email) {
            return 'O e-mail do usuário é obrigatório.';
        } else if (!checkEmail(email)) {
            return 'Insira um e-mail válido.';
        }
        try {
            const response = await api.post('/usuarios/verificarEmail', { usu_email: email, usu_id: id });
            if (response.data.sucesso && response.data.dados) {
                return 'Email já está cadastrado.';
            }
        } catch (error) {
            console.error('Erro na verificação do email:', error);
            return 'Erro na verificação do email. Por favor, tente novamente.';
        }
        return null;
    };

    const sortByColumn = (column) => {
        let newIsAsc = true;

        if (sortedColumn === column) {
            newIsAsc = !isAsc;
        }

        const sortedData = [...filteredUsers].sort((a, b) => {
            if (a[column] < b[column]) return newIsAsc ? -1 : 1;
            if (a[column] > b[column]) return newIsAsc ? 1 : -1;
            return 0;
        });

        setFilteredUsers(sortedData);
        setSortedColumn(column);
        setIsAsc(newIsAsc);
    };