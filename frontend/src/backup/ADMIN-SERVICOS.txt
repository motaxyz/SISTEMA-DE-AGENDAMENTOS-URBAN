'use client'

import { useState, useEffect } from 'react';
import styles from './page.module.css';

import api from '@/services/api';

import FormServicos from '@/components/FormServicos';
import ModalNovaCategoria from '@/components/novaCategoria';
import EditarCategoria from '@/components/editarCategoria';

import { PiListMagnifyingGlassBold } from "react-icons/pi";
import { MdRemoveRedEye, MdEdit } from "react-icons/md";
import Swal from 'sweetalert2';

export default function Servicos() {
    const [servicos, setServicos] = useState([]);
    const [selectedServico, setSelectedServico] = useState(null);
    const [isViewing, setIsViewing] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [statusFilter, setStatusFilter] = useState('todos');
    const [searchText, setSearchText] = useState('');
    const [showForm, setShowForm] = useState(false);
    const [filteredServicos, setFilteredServicos] = useState([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [sortedColumn, setSortedColumn] = useState(null);
    const [isAsc, setIsAsc] = useState(true);
    const [categoriasServ, setCategoriasServ] = useState([]);
    const [modalCategoriaOpen, setModalCategoriaOpen] = useState(false);
    const [editarCategoriaOpen, setEditarCategoriaOpen] = useState(false);

    const usersPerPage = 15;

    const indexOfLastUser = currentPage * usersPerPage;
    const indexOfFirstUser = indexOfLastUser - usersPerPage;
    const currentServicos = filteredServicos.slice(indexOfFirstUser, indexOfLastUser);

    useEffect(() => {
        ListarServicos();
    }, []);

    useEffect(() => {
        setFilteredServicos(servicos);
    }, [servicos]);

    useEffect(() => {
        handleSearch();
    }, [searchText, statusFilter]);

    const ListarServicos = async () => {
        try {
            const response = await api.get('/servicos');
            setServicos(response.data.dados);
        } catch (error) {
            console.error("Erro ao buscar os serviços:", error);
            Swal.fire({
                title: 'Erro!',
                text: 'Não foi possível carregar os serviços.',
                icon: 'error',
                iconColor: '#d33',
                confirmButtonColor: '#d33',
            });
        }
    };

    const ListarCategoriasServAtivas = async () => {
        try {
            const response = await api.get('/categoriasServicosAtivas');
            setCategoriasServ(response.data.dados);
        } catch (error) {
            console.error("Erro ao buscar as categorias:", error);
            Swal.fire({
                title: 'Erro!',
                text: 'Não foi possível buscar as categorias.',
                icon: 'error',
                iconColor: '#d33',
                confirmButtonColor: '#d33',
            });
        }
    };

    const handleSearch = () => {
        setSortedColumn(null);
        setIsAsc(true);

        const result = servicos.filter((servico) => {
            const statusMatch = statusFilter === 'todos' ||
                (statusFilter === 'ativo' && servico.serv_situacao === 'Ativo') ||
                (statusFilter === 'inativo' && servico.serv_situacao === 'Inativo');

            const searchTextMatch = searchText === '' ||
                servico.serv_nome.toLowerCase().includes(searchText.toLowerCase()) ||
                servico.cat_serv_nome.toLowerCase().includes(searchText.toLowerCase());

            return statusMatch && searchTextMatch;
        });

        setFilteredServicos(result);
        setCurrentPage(1);
    };

    const handleViewServicos = async (servicos) => {
        try {
            const response = await api.get(`/servicos/${servicos.serv_id}`);

            if (response.data.sucesso) {
                setSelectedServico(response.data.dados);
                setShowForm(true);
                setIsViewing(true);
                setIsEditing(false);
            } else {
                throw new Error(response.data.mensagem);
            }
        } catch (error) {
            console.error("Erro ao visualizar serviço:", error);
            Swal.fire({
                title: 'Erro!',
                text: error.response ? error.response.data.mensagem : 'Erro desconhecido ao buscar serviço.',
                icon: 'error',
                iconColor: '#d33',
                confirmButtonColor: '#d33',
            });
        }
    };

    const handleEditServicos = (servicos) => {
        setSelectedServico(servicos);
        setShowForm(true);
        setIsViewing(false);
        setIsEditing(true);
    };

    const handleExit = () => {
        setShowForm(false);
        setSelectedServico(null);
        setIsViewing(false);
        setIsEditing(false);
    };

    const handleSubmit = async (servico) => {
        try {
            let response;

            if (servico.serv_id) {
                response = await api.patch(`/servicos/${servico.serv_id}`, servico);
            } else {
                response = await api.post('/servicos', servico);
            }

            Swal.fire({
                title: 'Sucesso!',
                text: response.data.mensagem,
                icon: 'success',
                confirmButtonColor: 'rgb(40, 167, 69)',
                iconColor: 'rgb(40, 167, 69)',
            });

            ListarServicos();
            setShowForm(false);
        } catch (error) {
            console.error("Erro ao salvar serviço:", error);
            Swal.fire({
                title: 'Erro!',
                text: error.response ? error.response.data.mensagem : 'Erro ao salvar serviço.',
                icon: 'error',
                iconColor: '#d33',
                confirmButtonColor: '#d33',
            });
        }
    };

    const Create = () => {
        setSelectedServico({
            cat_serv_id: '',
            serv_descricao: '',
            serv_duracao: '',
            serv_nome: '',
            serv_preco: '',
            serv_situacao: 1
        })
        setShowForm(true);
        ListarCategoriasServAtivas();
    };

    const sortByColumn = (column) => {
        let newIsAsc = true;

        if (sortedColumn === column) {
            newIsAsc = !isAsc;
        }

        const sortedData = [...filteredServicos].sort((a, b) => {
            if (a[column] < b[column]) return newIsAsc ? -1 : 1;
            if (a[column] > b[column]) return newIsAsc ? 1 : -1;
            return 0;
        });

        setFilteredServicos(sortedData);
        setSortedColumn(column);
        setIsAsc(newIsAsc);
    };

    const Cancelar = () => {
        Swal.fire({
            title: "Deseja Cancelar?",
            text: "As informações não serão salvas",
            icon: "warning",
            iconColor: "orange",
            showCancelButton: true,
            cancelButtonColor: "#d33",
            confirmButtonColor: "rgb(40, 167, 69)",
            cancelButtonText: "Cancelar",
            confirmButtonText: "Confirmar",
            reverseButtons: true,
            backdrop: "rgba(0,0,0,0.7)",
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: "Cancelado!",
                    text: "As alterações foram canceladas.",
                    icon: "success",
                    iconColor: "rgb(40, 167, 69)",
                    confirmButtonColor: "rgb(40, 167, 69)",
                }).then(() => {
                    setShowForm(false);
                    setSelectedServico(null);
                    setIsViewing(false);
                    setIsEditing(false);
                });
            }
        });
    };

    const handleNovaCategoria = () => {
        setModalCategoriaOpen(true);
    };

    const handleCategoriaCriada = () => {
        ListarCategoriasServAtivas();
    };

    const handleEditCategoria = () => {
        setEditarCategoriaOpen(true);
    };

    const handleCategoriaExcluida = () => {
        ListarCategoriasServAtivas();
    };